/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef base_TYPES_H
#define base_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace com { namespace example { namespace project {

class Tweet;

class TwitterUnavailable;

typedef struct _Tweet__isset {
  _Tweet__isset() : language(true), MAP_CONST(true) {}
  bool language :1;
  bool MAP_CONST :1;
} _Tweet__isset;

class Tweet {
 public:

  static const char* ascii_fingerprint; // = "BDA87D6E286A4FA49200AD7B0161BA00";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0xA8,0x7D,0x6E,0x28,0x6A,0x4F,0xA4,0x92,0x00,0xAD,0x7B,0x01,0x61,0xBA,0x00};

  Tweet(const Tweet&);
  Tweet& operator=(const Tweet&);
  Tweet() : userId(0), userName(), text(), language("english") {
    MAP_CONST.insert(std::make_pair("hello", "world"));
    MAP_CONST.insert(std::make_pair("goodnight", "moon"));

  }

  virtual ~Tweet() throw();
  int32_t userId;
  std::string userName;
  std::string text;
  std::string language;
  std::map<std::string, std::string>  MAP_CONST;

  _Tweet__isset __isset;

  void __set_userId(const int32_t val);

  void __set_userName(const std::string& val);

  void __set_text(const std::string& val);

  void __set_language(const std::string& val);

  void __set_MAP_CONST(const std::map<std::string, std::string> & val);

  bool operator == (const Tweet & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(text == rhs.text))
      return false;
    if (__isset.language != rhs.__isset.language)
      return false;
    else if (__isset.language && !(language == rhs.language))
      return false;
    if (!(MAP_CONST == rhs.MAP_CONST))
      return false;
    return true;
  }
  bool operator != (const Tweet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tweet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Tweet& obj);
};

void swap(Tweet &a, Tweet &b);

typedef struct _TwitterUnavailable__isset {
  _TwitterUnavailable__isset() : message(false) {}
  bool message :1;
} _TwitterUnavailable__isset;

class TwitterUnavailable : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TwitterUnavailable(const TwitterUnavailable&);
  TwitterUnavailable& operator=(const TwitterUnavailable&);
  TwitterUnavailable() : message() {
  }

  virtual ~TwitterUnavailable() throw();
  std::string message;

  _TwitterUnavailable__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const TwitterUnavailable & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TwitterUnavailable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TwitterUnavailable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TwitterUnavailable& obj);
};

void swap(TwitterUnavailable &a, TwitterUnavailable &b);

}}} // namespace

#endif
