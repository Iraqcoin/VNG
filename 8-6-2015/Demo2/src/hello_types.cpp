/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hello_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace hello { namespace thrift {

int _kTweetTypeValues[] = {
  TweetType::TWEET,
  TweetType::RETWEET,
  TweetType::REPLY
};
const char* _kTweetTypeNames[] = {
  "TWEET",
  "RETWEET",
  "REPLY"
};
const std::map<int, const char*> _TweetType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTweetTypeValues, _kTweetTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Location::~Location() throw() {
}


void Location::__set_id(const int32_t val) {
  this->id = val;
}

void Location::__set_name(const std::string& val) {
  this->name = val;
}

void Location::__set_demo(const Demo& val) {
  this->demo = val;
}

void Location::__set_lo(const Location& val) {
  this->lo = val;
}

const char* Location::ascii_fingerprint = "FA35B88690BB4F87FE720D8435516664";
const uint8_t Location::binary_fingerprint[16] = {0xFA,0x35,0xB8,0x86,0x90,0xBB,0x4F,0x87,0xFE,0x72,0x0D,0x84,0x35,0x51,0x66,0x64};

uint32_t Location::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->demo.read(iprot);
          this->__isset.demo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lo.read(iprot);
          this->__isset.lo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Location::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Location");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("demo", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->demo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lo", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->lo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Location &a, Location &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.demo, b.demo);
  swap(a.lo, b.lo);
  swap(a.__isset, b.__isset);
}

Location::Location(const Location& other0) {
  id = other0.id;
  name = other0.name;
  demo = other0.demo;
  lo = other0.lo;
  __isset = other0.__isset;
}
Location& Location::operator=(const Location& other1) {
  id = other1.id;
  name = other1.name;
  demo = other1.demo;
  lo = other1.lo;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Location& obj) {
  using apache::thrift::to_string;
  out << "Location(";
  out << "id=" << to_string(obj.id);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "demo=" << to_string(obj.demo);
  out << ", " << "lo=" << to_string(obj.lo);
  out << ")";
  return out;
}


Tweet::~Tweet() throw() {
}


void Tweet::__set_loc(const Location& val) {
  this->loc = val;
__isset.loc = true;
}

const char* Tweet::ascii_fingerprint = "0F293DFEB4315EDC80A9C58B0509AF38";
const uint8_t Tweet::binary_fingerprint[16] = {0x0F,0x29,0x3D,0xFE,0xB4,0x31,0x5E,0xDC,0x80,0xA9,0xC5,0x8B,0x05,0x09,0xAF,0x38};

uint32_t Tweet::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->loc.read(iprot);
          this->__isset.loc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tweet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Tweet");

  if (this->__isset.loc) {
    xfer += oprot->writeFieldBegin("loc", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->loc.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Tweet &a, Tweet &b) {
  using ::std::swap;
  swap(a.loc, b.loc);
  swap(a.__isset, b.__isset);
}

Tweet::Tweet(const Tweet& other2) {
  loc = other2.loc;
  __isset = other2.__isset;
}
Tweet& Tweet::operator=(const Tweet& other3) {
  loc = other3.loc;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Tweet& obj) {
  using apache::thrift::to_string;
  out << "Tweet(";
  out << "loc="; (obj.__isset.loc ? (out << to_string(obj.loc)) : (out << "<null>"));
  out << ")";
  return out;
}


Demo::~Demo() throw() {
}


void Demo::__set_demoName(const std::string& val) {
  this->demoName = val;
__isset.demoName = true;
}

const char* Demo::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t Demo::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t Demo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->demoName);
          this->__isset.demoName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Demo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Demo");

  if (this->__isset.demoName) {
    xfer += oprot->writeFieldBegin("demoName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->demoName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Demo &a, Demo &b) {
  using ::std::swap;
  swap(a.demoName, b.demoName);
  swap(a.__isset, b.__isset);
}

Demo::Demo(const Demo& other4) {
  demoName = other4.demoName;
  __isset = other4.__isset;
}
Demo& Demo::operator=(const Demo& other5) {
  demoName = other5.demoName;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Demo& obj) {
  using apache::thrift::to_string;
  out << "Demo(";
  out << "demoName="; (obj.__isset.demoName ? (out << to_string(obj.demoName)) : (out << "<null>"));
  out << ")";
  return out;
}

}} // namespace
