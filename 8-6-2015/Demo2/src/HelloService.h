/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HelloService_H
#define HelloService_H

#include <thrift/TDispatchProcessor.h>
#include "hello_types.h"
#include "Twitter.h"

namespace hello { namespace thrift {

class HelloServiceIf : virtual public  ::com::example::project::TwitterIf {
 public:
  virtual ~HelloServiceIf() {}
  virtual void getBaseTweet( ::com::example::project::Tweet& _return) = 0;
  virtual void getChildTweet(Tweet& _return) = 0;
  virtual void KhoiTao(Tweet& _return) = 0;
};

class HelloServiceIfFactory : virtual public  ::com::example::project::TwitterIfFactory {
 public:
  typedef HelloServiceIf Handler;

  virtual ~HelloServiceIfFactory() {}

  virtual HelloServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::com::example::project::TwitterIf* /* handler */) = 0;
};

class HelloServiceIfSingletonFactory : virtual public HelloServiceIfFactory {
 public:
  HelloServiceIfSingletonFactory(const boost::shared_ptr<HelloServiceIf>& iface) : iface_(iface) {}
  virtual ~HelloServiceIfSingletonFactory() {}

  virtual HelloServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::com::example::project::TwitterIf* /* handler */) {}

 protected:
  boost::shared_ptr<HelloServiceIf> iface_;
};

class HelloServiceNull : virtual public HelloServiceIf , virtual public  ::com::example::project::TwitterNull {
 public:
  virtual ~HelloServiceNull() {}
  void getBaseTweet( ::com::example::project::Tweet& /* _return */) {
    return;
  }
  void getChildTweet(Tweet& /* _return */) {
    return;
  }
  void KhoiTao(Tweet& /* _return */) {
    return;
  }
};


class HelloService_getBaseTweet_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  HelloService_getBaseTweet_args(const HelloService_getBaseTweet_args&);
  HelloService_getBaseTweet_args& operator=(const HelloService_getBaseTweet_args&);
  HelloService_getBaseTweet_args() {
  }

  virtual ~HelloService_getBaseTweet_args() throw();

  bool operator == (const HelloService_getBaseTweet_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HelloService_getBaseTweet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloService_getBaseTweet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HelloService_getBaseTweet_args& obj);
};


class HelloService_getBaseTweet_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~HelloService_getBaseTweet_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HelloService_getBaseTweet_pargs& obj);
};

typedef struct _HelloService_getBaseTweet_result__isset {
  _HelloService_getBaseTweet_result__isset() : success(false) {}
  bool success :1;
} _HelloService_getBaseTweet_result__isset;

class HelloService_getBaseTweet_result {
 public:

  static const char* ascii_fingerprint; // = "8230AF62E877ADD680F886D5B8953D13";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x30,0xAF,0x62,0xE8,0x77,0xAD,0xD6,0x80,0xF8,0x86,0xD5,0xB8,0x95,0x3D,0x13};

  HelloService_getBaseTweet_result(const HelloService_getBaseTweet_result&);
  HelloService_getBaseTweet_result& operator=(const HelloService_getBaseTweet_result&);
  HelloService_getBaseTweet_result() {
  }

  virtual ~HelloService_getBaseTweet_result() throw();
   ::com::example::project::Tweet success;

  _HelloService_getBaseTweet_result__isset __isset;

  void __set_success(const  ::com::example::project::Tweet& val);

  bool operator == (const HelloService_getBaseTweet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HelloService_getBaseTweet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloService_getBaseTweet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HelloService_getBaseTweet_result& obj);
};

typedef struct _HelloService_getBaseTweet_presult__isset {
  _HelloService_getBaseTweet_presult__isset() : success(false) {}
  bool success :1;
} _HelloService_getBaseTweet_presult__isset;

class HelloService_getBaseTweet_presult {
 public:

  static const char* ascii_fingerprint; // = "8230AF62E877ADD680F886D5B8953D13";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x30,0xAF,0x62,0xE8,0x77,0xAD,0xD6,0x80,0xF8,0x86,0xD5,0xB8,0x95,0x3D,0x13};


  virtual ~HelloService_getBaseTweet_presult() throw();
   ::com::example::project::Tweet* success;

  _HelloService_getBaseTweet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HelloService_getBaseTweet_presult& obj);
};


class HelloService_getChildTweet_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  HelloService_getChildTweet_args(const HelloService_getChildTweet_args&);
  HelloService_getChildTweet_args& operator=(const HelloService_getChildTweet_args&);
  HelloService_getChildTweet_args() {
  }

  virtual ~HelloService_getChildTweet_args() throw();

  bool operator == (const HelloService_getChildTweet_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HelloService_getChildTweet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloService_getChildTweet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HelloService_getChildTweet_args& obj);
};


class HelloService_getChildTweet_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~HelloService_getChildTweet_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HelloService_getChildTweet_pargs& obj);
};

typedef struct _HelloService_getChildTweet_result__isset {
  _HelloService_getChildTweet_result__isset() : success(false) {}
  bool success :1;
} _HelloService_getChildTweet_result__isset;

class HelloService_getChildTweet_result {
 public:

  static const char* ascii_fingerprint; // = "1B045272F45427A20FE20AAEF083F9BA";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x04,0x52,0x72,0xF4,0x54,0x27,0xA2,0x0F,0xE2,0x0A,0xAE,0xF0,0x83,0xF9,0xBA};

  HelloService_getChildTweet_result(const HelloService_getChildTweet_result&);
  HelloService_getChildTweet_result& operator=(const HelloService_getChildTweet_result&);
  HelloService_getChildTweet_result() {
  }

  virtual ~HelloService_getChildTweet_result() throw();
  Tweet success;

  _HelloService_getChildTweet_result__isset __isset;

  void __set_success(const Tweet& val);

  bool operator == (const HelloService_getChildTweet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HelloService_getChildTweet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloService_getChildTweet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HelloService_getChildTweet_result& obj);
};

typedef struct _HelloService_getChildTweet_presult__isset {
  _HelloService_getChildTweet_presult__isset() : success(false) {}
  bool success :1;
} _HelloService_getChildTweet_presult__isset;

class HelloService_getChildTweet_presult {
 public:

  static const char* ascii_fingerprint; // = "1B045272F45427A20FE20AAEF083F9BA";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x04,0x52,0x72,0xF4,0x54,0x27,0xA2,0x0F,0xE2,0x0A,0xAE,0xF0,0x83,0xF9,0xBA};


  virtual ~HelloService_getChildTweet_presult() throw();
  Tweet* success;

  _HelloService_getChildTweet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HelloService_getChildTweet_presult& obj);
};


class HelloService_KhoiTao_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  HelloService_KhoiTao_args(const HelloService_KhoiTao_args&);
  HelloService_KhoiTao_args& operator=(const HelloService_KhoiTao_args&);
  HelloService_KhoiTao_args() {
  }

  virtual ~HelloService_KhoiTao_args() throw();

  bool operator == (const HelloService_KhoiTao_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HelloService_KhoiTao_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloService_KhoiTao_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HelloService_KhoiTao_args& obj);
};


class HelloService_KhoiTao_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~HelloService_KhoiTao_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HelloService_KhoiTao_pargs& obj);
};

typedef struct _HelloService_KhoiTao_result__isset {
  _HelloService_KhoiTao_result__isset() : success(false) {}
  bool success :1;
} _HelloService_KhoiTao_result__isset;

class HelloService_KhoiTao_result {
 public:

  static const char* ascii_fingerprint; // = "1B045272F45427A20FE20AAEF083F9BA";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x04,0x52,0x72,0xF4,0x54,0x27,0xA2,0x0F,0xE2,0x0A,0xAE,0xF0,0x83,0xF9,0xBA};

  HelloService_KhoiTao_result(const HelloService_KhoiTao_result&);
  HelloService_KhoiTao_result& operator=(const HelloService_KhoiTao_result&);
  HelloService_KhoiTao_result() {
  }

  virtual ~HelloService_KhoiTao_result() throw();
  Tweet success;

  _HelloService_KhoiTao_result__isset __isset;

  void __set_success(const Tweet& val);

  bool operator == (const HelloService_KhoiTao_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HelloService_KhoiTao_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloService_KhoiTao_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HelloService_KhoiTao_result& obj);
};

typedef struct _HelloService_KhoiTao_presult__isset {
  _HelloService_KhoiTao_presult__isset() : success(false) {}
  bool success :1;
} _HelloService_KhoiTao_presult__isset;

class HelloService_KhoiTao_presult {
 public:

  static const char* ascii_fingerprint; // = "1B045272F45427A20FE20AAEF083F9BA";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0x04,0x52,0x72,0xF4,0x54,0x27,0xA2,0x0F,0xE2,0x0A,0xAE,0xF0,0x83,0xF9,0xBA};


  virtual ~HelloService_KhoiTao_presult() throw();
  Tweet* success;

  _HelloService_KhoiTao_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HelloService_KhoiTao_presult& obj);
};

class HelloServiceClient : virtual public HelloServiceIf, public  ::com::example::project::TwitterClient {
 public:
  HelloServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::com::example::project::TwitterClient(prot, prot) {}
  HelloServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::com::example::project::TwitterClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getBaseTweet( ::com::example::project::Tweet& _return);
  void send_getBaseTweet();
  void recv_getBaseTweet( ::com::example::project::Tweet& _return);
  void getChildTweet(Tweet& _return);
  void send_getChildTweet();
  void recv_getChildTweet(Tweet& _return);
  void KhoiTao(Tweet& _return);
  void send_KhoiTao();
  void recv_KhoiTao(Tweet& _return);
};

class HelloServiceProcessor : public  ::com::example::project::TwitterProcessor {
 protected:
  boost::shared_ptr<HelloServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HelloServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getBaseTweet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getChildTweet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_KhoiTao(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HelloServiceProcessor(boost::shared_ptr<HelloServiceIf> iface) :
     ::com::example::project::TwitterProcessor(iface),
    iface_(iface) {
    processMap_["getBaseTweet"] = &HelloServiceProcessor::process_getBaseTweet;
    processMap_["getChildTweet"] = &HelloServiceProcessor::process_getChildTweet;
    processMap_["KhoiTao"] = &HelloServiceProcessor::process_KhoiTao;
  }

  virtual ~HelloServiceProcessor() {}
};

class HelloServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HelloServiceProcessorFactory(const ::boost::shared_ptr< HelloServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HelloServiceIfFactory > handlerFactory_;
};

class HelloServiceMultiface : virtual public HelloServiceIf, public  ::com::example::project::TwitterMultiface {
 public:
  HelloServiceMultiface(std::vector<boost::shared_ptr<HelloServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<HelloServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::com::example::project::TwitterMultiface::add(*iter);
    }
  }
  virtual ~HelloServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HelloServiceIf> > ifaces_;
  HelloServiceMultiface() {}
  void add(boost::shared_ptr<HelloServiceIf> iface) {
     ::com::example::project::TwitterMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void getBaseTweet( ::com::example::project::Tweet& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBaseTweet(_return);
    }
    ifaces_[i]->getBaseTweet(_return);
    return;
  }

  void getChildTweet(Tweet& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChildTweet(_return);
    }
    ifaces_[i]->getChildTweet(_return);
    return;
  }

  void KhoiTao(Tweet& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->KhoiTao(_return);
    }
    ifaces_[i]->KhoiTao(_return);
    return;
  }

};

}} // namespace

#endif
