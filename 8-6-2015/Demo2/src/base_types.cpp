/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "base_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace com { namespace example { namespace project {


Tweet::~Tweet() throw() {
}


void Tweet::__set_userId(const int32_t val) {
  this->userId = val;
}

void Tweet::__set_userName(const std::string& val) {
  this->userName = val;
}

void Tweet::__set_text(const std::string& val) {
  this->text = val;
}

void Tweet::__set_language(const std::string& val) {
  this->language = val;
__isset.language = true;
}

void Tweet::__set_MAP_CONST(const std::map<std::string, std::string> & val) {
  this->MAP_CONST = val;
}

const char* Tweet::ascii_fingerprint = "BDA87D6E286A4FA49200AD7B0161BA00";
const uint8_t Tweet::binary_fingerprint[16] = {0xBD,0xA8,0x7D,0x6E,0x28,0x6A,0x4F,0xA4,0x92,0x00,0xAD,0x7B,0x01,0x61,0xBA,0x00};

uint32_t Tweet::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_userId = false;
  bool isset_userName = false;
  bool isset_text = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          isset_userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          isset_userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          isset_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->language);
          this->__isset.language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->MAP_CONST.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->MAP_CONST[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.MAP_CONST = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_userId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_userName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_text)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Tweet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Tweet");

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.language) {
    xfer += oprot->writeFieldBegin("language", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->language);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("MAP_CONST", ::apache::thrift::protocol::T_MAP, 17);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->MAP_CONST.size()));
    std::map<std::string, std::string> ::const_iterator _iter7;
    for (_iter7 = this->MAP_CONST.begin(); _iter7 != this->MAP_CONST.end(); ++_iter7)
    {
      xfer += oprot->writeString(_iter7->first);
      xfer += oprot->writeString(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Tweet &a, Tweet &b) {
  using ::std::swap;
  swap(a.userId, b.userId);
  swap(a.userName, b.userName);
  swap(a.text, b.text);
  swap(a.language, b.language);
  swap(a.MAP_CONST, b.MAP_CONST);
  swap(a.__isset, b.__isset);
}

Tweet::Tweet(const Tweet& other8) {
  userId = other8.userId;
  userName = other8.userName;
  text = other8.text;
  language = other8.language;
  MAP_CONST = other8.MAP_CONST;
  __isset = other8.__isset;
}
Tweet& Tweet::operator=(const Tweet& other9) {
  userId = other9.userId;
  userName = other9.userName;
  text = other9.text;
  language = other9.language;
  MAP_CONST = other9.MAP_CONST;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Tweet& obj) {
  using apache::thrift::to_string;
  out << "Tweet(";
  out << "userId=" << to_string(obj.userId);
  out << ", " << "userName=" << to_string(obj.userName);
  out << ", " << "text=" << to_string(obj.text);
  out << ", " << "language="; (obj.__isset.language ? (out << to_string(obj.language)) : (out << "<null>"));
  out << ", " << "MAP_CONST=" << to_string(obj.MAP_CONST);
  out << ")";
  return out;
}


TwitterUnavailable::~TwitterUnavailable() throw() {
}


void TwitterUnavailable::__set_message(const std::string& val) {
  this->message = val;
}

const char* TwitterUnavailable::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t TwitterUnavailable::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t TwitterUnavailable::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TwitterUnavailable::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TwitterUnavailable");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TwitterUnavailable &a, TwitterUnavailable &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

TwitterUnavailable::TwitterUnavailable(const TwitterUnavailable& other10) : TException() {
  message = other10.message;
  __isset = other10.__isset;
}
TwitterUnavailable& TwitterUnavailable::operator=(const TwitterUnavailable& other11) {
  message = other11.message;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TwitterUnavailable& obj) {
  using apache::thrift::to_string;
  out << "TwitterUnavailable(";
  out << "message=" << to_string(obj.message);
  out << ")";
  return out;
}

}}} // namespace
