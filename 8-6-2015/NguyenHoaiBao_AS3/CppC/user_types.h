/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef user_TYPES_H
#define user_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Common { namespace ThriftInterface {

class User;

typedef struct _User__isset {
  _User__isset() : Id(false), username(false), password(false), visitor(false) {}
  bool Id :1;
  bool username :1;
  bool password :1;
  bool visitor :1;
} _User__isset;

class User {
 public:

  static const char* ascii_fingerprint; // = "8647601436A6884E958535045FA2944B";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x47,0x60,0x14,0x36,0xA6,0x88,0x4E,0x95,0x85,0x35,0x04,0x5F,0xA2,0x94,0x4B};

  User(const User&);
  User& operator=(const User&);
  User() : Id(0), username(), password(), visitor(0) {
  }

  virtual ~User() throw();
  int32_t Id;
  std::string username;
  std::string password;
  int32_t visitor;

  _User__isset __isset;

  void __set_Id(const int32_t val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_visitor(const int32_t val);

  bool operator == (const User & rhs) const
  {
    if (__isset.Id != rhs.__isset.Id)
      return false;
    else if (__isset.Id && !(Id == rhs.Id))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.password != rhs.__isset.password)
      return false;
    else if (__isset.password && !(password == rhs.password))
      return false;
    if (__isset.visitor != rhs.__isset.visitor)
      return false;
    else if (__isset.visitor && !(visitor == rhs.visitor))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const User& obj);
};

void swap(User &a, User &b);

}} // namespace

#endif
