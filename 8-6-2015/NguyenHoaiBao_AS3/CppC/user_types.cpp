/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "user_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Common { namespace ThriftInterface {


User::~User() throw() {
}


void User::__set_Id(const int32_t val) {
  this->Id = val;
__isset.Id = true;
}

void User::__set_username(const std::string& val) {
  this->username = val;
__isset.username = true;
}

void User::__set_password(const std::string& val) {
  this->password = val;
__isset.password = true;
}

void User::__set_visitor(const int32_t val) {
  this->visitor = val;
__isset.visitor = true;
}

const char* User::ascii_fingerprint = "8647601436A6884E958535045FA2944B";
const uint8_t User::binary_fingerprint[16] = {0x86,0x47,0x60,0x14,0x36,0xA6,0x88,0x4E,0x95,0x85,0x35,0x04,0x5F,0xA2,0x94,0x4B};

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->visitor);
          this->__isset.visitor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("User");

  if (this->__isset.Id) {
    xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->Id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.username) {
    xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->username);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.password) {
    xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->password);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.visitor) {
    xfer += oprot->writeFieldBegin("visitor", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->visitor);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.username, b.username);
  swap(a.password, b.password);
  swap(a.visitor, b.visitor);
  swap(a.__isset, b.__isset);
}

User::User(const User& other0) {
  Id = other0.Id;
  username = other0.username;
  password = other0.password;
  visitor = other0.visitor;
  __isset = other0.__isset;
}
User& User::operator=(const User& other1) {
  Id = other1.Id;
  username = other1.username;
  password = other1.password;
  visitor = other1.visitor;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const User& obj) {
  using apache::thrift::to_string;
  out << "User(";
  out << "Id="; (obj.__isset.Id ? (out << to_string(obj.Id)) : (out << "<null>"));
  out << ", " << "username="; (obj.__isset.username ? (out << to_string(obj.username)) : (out << "<null>"));
  out << ", " << "password="; (obj.__isset.password ? (out << to_string(obj.password)) : (out << "<null>"));
  out << ", " << "visitor="; (obj.__isset.visitor ? (out << to_string(obj.visitor)) : (out << "<null>"));
  out << ")";
  return out;
}

}} // namespace
