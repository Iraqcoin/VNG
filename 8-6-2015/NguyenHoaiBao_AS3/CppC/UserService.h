/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserService_H
#define UserService_H

#include <thrift/TDispatchProcessor.h>
#include "user_types.h"

namespace Common { namespace ThriftInterface {

class UserServiceIf {
 public:
  virtual ~UserServiceIf() {}
  virtual void GetUser(User& _return, const std::string& username) = 0;
  virtual int32_t UpdateVisitor(const std::string& username) = 0;
  virtual void Increase(User& _return, const std::string& username) = 0;
  virtual bool CheckLogin(const std::string& username, const std::string& pword) = 0;
};

class UserServiceIfFactory {
 public:
  typedef UserServiceIf Handler;

  virtual ~UserServiceIfFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserServiceIf* /* handler */) = 0;
};

class UserServiceIfSingletonFactory : virtual public UserServiceIfFactory {
 public:
  UserServiceIfSingletonFactory(const boost::shared_ptr<UserServiceIf>& iface) : iface_(iface) {}
  virtual ~UserServiceIfSingletonFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<UserServiceIf> iface_;
};

class UserServiceNull : virtual public UserServiceIf {
 public:
  virtual ~UserServiceNull() {}
  void GetUser(User& /* _return */, const std::string& /* username */) {
    return;
  }
  int32_t UpdateVisitor(const std::string& /* username */) {
    int32_t _return = 0;
    return _return;
  }
  void Increase(User& /* _return */, const std::string& /* username */) {
    return;
  }
  bool CheckLogin(const std::string& /* username */, const std::string& /* pword */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _UserService_GetUser_args__isset {
  _UserService_GetUser_args__isset() : username(false) {}
  bool username :1;
} _UserService_GetUser_args__isset;

class UserService_GetUser_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  UserService_GetUser_args(const UserService_GetUser_args&);
  UserService_GetUser_args& operator=(const UserService_GetUser_args&);
  UserService_GetUser_args() : username() {
  }

  virtual ~UserService_GetUser_args() throw();
  std::string username;

  _UserService_GetUser_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const UserService_GetUser_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const UserService_GetUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_GetUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_GetUser_args& obj);
};


class UserService_GetUser_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~UserService_GetUser_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_GetUser_pargs& obj);
};

typedef struct _UserService_GetUser_result__isset {
  _UserService_GetUser_result__isset() : success(false) {}
  bool success :1;
} _UserService_GetUser_result__isset;

class UserService_GetUser_result {
 public:

  static const char* ascii_fingerprint; // = "57C08B5FD67BB390B2E709F40CEE0500";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0xC0,0x8B,0x5F,0xD6,0x7B,0xB3,0x90,0xB2,0xE7,0x09,0xF4,0x0C,0xEE,0x05,0x00};

  UserService_GetUser_result(const UserService_GetUser_result&);
  UserService_GetUser_result& operator=(const UserService_GetUser_result&);
  UserService_GetUser_result() {
  }

  virtual ~UserService_GetUser_result() throw();
  User success;

  _UserService_GetUser_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const UserService_GetUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_GetUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_GetUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_GetUser_result& obj);
};

typedef struct _UserService_GetUser_presult__isset {
  _UserService_GetUser_presult__isset() : success(false) {}
  bool success :1;
} _UserService_GetUser_presult__isset;

class UserService_GetUser_presult {
 public:

  static const char* ascii_fingerprint; // = "57C08B5FD67BB390B2E709F40CEE0500";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0xC0,0x8B,0x5F,0xD6,0x7B,0xB3,0x90,0xB2,0xE7,0x09,0xF4,0x0C,0xEE,0x05,0x00};


  virtual ~UserService_GetUser_presult() throw();
  User* success;

  _UserService_GetUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const UserService_GetUser_presult& obj);
};

typedef struct _UserService_UpdateVisitor_args__isset {
  _UserService_UpdateVisitor_args__isset() : username(false) {}
  bool username :1;
} _UserService_UpdateVisitor_args__isset;

class UserService_UpdateVisitor_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  UserService_UpdateVisitor_args(const UserService_UpdateVisitor_args&);
  UserService_UpdateVisitor_args& operator=(const UserService_UpdateVisitor_args&);
  UserService_UpdateVisitor_args() : username() {
  }

  virtual ~UserService_UpdateVisitor_args() throw();
  std::string username;

  _UserService_UpdateVisitor_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const UserService_UpdateVisitor_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const UserService_UpdateVisitor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_UpdateVisitor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_UpdateVisitor_args& obj);
};


class UserService_UpdateVisitor_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~UserService_UpdateVisitor_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_UpdateVisitor_pargs& obj);
};

typedef struct _UserService_UpdateVisitor_result__isset {
  _UserService_UpdateVisitor_result__isset() : success(false) {}
  bool success :1;
} _UserService_UpdateVisitor_result__isset;

class UserService_UpdateVisitor_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  UserService_UpdateVisitor_result(const UserService_UpdateVisitor_result&);
  UserService_UpdateVisitor_result& operator=(const UserService_UpdateVisitor_result&);
  UserService_UpdateVisitor_result() : success(0) {
  }

  virtual ~UserService_UpdateVisitor_result() throw();
  int32_t success;

  _UserService_UpdateVisitor_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const UserService_UpdateVisitor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_UpdateVisitor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_UpdateVisitor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_UpdateVisitor_result& obj);
};

typedef struct _UserService_UpdateVisitor_presult__isset {
  _UserService_UpdateVisitor_presult__isset() : success(false) {}
  bool success :1;
} _UserService_UpdateVisitor_presult__isset;

class UserService_UpdateVisitor_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~UserService_UpdateVisitor_presult() throw();
  int32_t* success;

  _UserService_UpdateVisitor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const UserService_UpdateVisitor_presult& obj);
};

typedef struct _UserService_Increase_args__isset {
  _UserService_Increase_args__isset() : username(false) {}
  bool username :1;
} _UserService_Increase_args__isset;

class UserService_Increase_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  UserService_Increase_args(const UserService_Increase_args&);
  UserService_Increase_args& operator=(const UserService_Increase_args&);
  UserService_Increase_args() : username() {
  }

  virtual ~UserService_Increase_args() throw();
  std::string username;

  _UserService_Increase_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const UserService_Increase_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const UserService_Increase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_Increase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_Increase_args& obj);
};


class UserService_Increase_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~UserService_Increase_pargs() throw();
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_Increase_pargs& obj);
};

typedef struct _UserService_Increase_result__isset {
  _UserService_Increase_result__isset() : success(false) {}
  bool success :1;
} _UserService_Increase_result__isset;

class UserService_Increase_result {
 public:

  static const char* ascii_fingerprint; // = "57C08B5FD67BB390B2E709F40CEE0500";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0xC0,0x8B,0x5F,0xD6,0x7B,0xB3,0x90,0xB2,0xE7,0x09,0xF4,0x0C,0xEE,0x05,0x00};

  UserService_Increase_result(const UserService_Increase_result&);
  UserService_Increase_result& operator=(const UserService_Increase_result&);
  UserService_Increase_result() {
  }

  virtual ~UserService_Increase_result() throw();
  User success;

  _UserService_Increase_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const UserService_Increase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_Increase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_Increase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_Increase_result& obj);
};

typedef struct _UserService_Increase_presult__isset {
  _UserService_Increase_presult__isset() : success(false) {}
  bool success :1;
} _UserService_Increase_presult__isset;

class UserService_Increase_presult {
 public:

  static const char* ascii_fingerprint; // = "57C08B5FD67BB390B2E709F40CEE0500";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0xC0,0x8B,0x5F,0xD6,0x7B,0xB3,0x90,0xB2,0xE7,0x09,0xF4,0x0C,0xEE,0x05,0x00};


  virtual ~UserService_Increase_presult() throw();
  User* success;

  _UserService_Increase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const UserService_Increase_presult& obj);
};

typedef struct _UserService_CheckLogin_args__isset {
  _UserService_CheckLogin_args__isset() : username(false), pword(false) {}
  bool username :1;
  bool pword :1;
} _UserService_CheckLogin_args__isset;

class UserService_CheckLogin_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  UserService_CheckLogin_args(const UserService_CheckLogin_args&);
  UserService_CheckLogin_args& operator=(const UserService_CheckLogin_args&);
  UserService_CheckLogin_args() : username(), pword() {
  }

  virtual ~UserService_CheckLogin_args() throw();
  std::string username;
  std::string pword;

  _UserService_CheckLogin_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_pword(const std::string& val);

  bool operator == (const UserService_CheckLogin_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(pword == rhs.pword))
      return false;
    return true;
  }
  bool operator != (const UserService_CheckLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_CheckLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_CheckLogin_args& obj);
};


class UserService_CheckLogin_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~UserService_CheckLogin_pargs() throw();
  const std::string* username;
  const std::string* pword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_CheckLogin_pargs& obj);
};

typedef struct _UserService_CheckLogin_result__isset {
  _UserService_CheckLogin_result__isset() : success(false) {}
  bool success :1;
} _UserService_CheckLogin_result__isset;

class UserService_CheckLogin_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  UserService_CheckLogin_result(const UserService_CheckLogin_result&);
  UserService_CheckLogin_result& operator=(const UserService_CheckLogin_result&);
  UserService_CheckLogin_result() : success(0) {
  }

  virtual ~UserService_CheckLogin_result() throw();
  bool success;

  _UserService_CheckLogin_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const UserService_CheckLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_CheckLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_CheckLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_CheckLogin_result& obj);
};

typedef struct _UserService_CheckLogin_presult__isset {
  _UserService_CheckLogin_presult__isset() : success(false) {}
  bool success :1;
} _UserService_CheckLogin_presult__isset;

class UserService_CheckLogin_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~UserService_CheckLogin_presult() throw();
  bool* success;

  _UserService_CheckLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const UserService_CheckLogin_presult& obj);
};

class UserServiceClient : virtual public UserServiceIf {
 public:
  UserServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetUser(User& _return, const std::string& username);
  void send_GetUser(const std::string& username);
  void recv_GetUser(User& _return);
  int32_t UpdateVisitor(const std::string& username);
  void send_UpdateVisitor(const std::string& username);
  int32_t recv_UpdateVisitor();
  void Increase(User& _return, const std::string& username);
  void send_Increase(const std::string& username);
  void recv_Increase(User& _return);
  bool CheckLogin(const std::string& username, const std::string& pword);
  void send_CheckLogin(const std::string& username, const std::string& pword);
  bool recv_CheckLogin();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<UserServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateVisitor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Increase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CheckLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserServiceProcessor(boost::shared_ptr<UserServiceIf> iface) :
    iface_(iface) {
    processMap_["GetUser"] = &UserServiceProcessor::process_GetUser;
    processMap_["UpdateVisitor"] = &UserServiceProcessor::process_UpdateVisitor;
    processMap_["Increase"] = &UserServiceProcessor::process_Increase;
    processMap_["CheckLogin"] = &UserServiceProcessor::process_CheckLogin;
  }

  virtual ~UserServiceProcessor() {}
};

class UserServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserServiceProcessorFactory(const ::boost::shared_ptr< UserServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UserServiceIfFactory > handlerFactory_;
};

class UserServiceMultiface : virtual public UserServiceIf {
 public:
  UserServiceMultiface(std::vector<boost::shared_ptr<UserServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UserServiceIf> > ifaces_;
  UserServiceMultiface() {}
  void add(boost::shared_ptr<UserServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetUser(User& _return, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUser(_return, username);
    }
    ifaces_[i]->GetUser(_return, username);
    return;
  }

  int32_t UpdateVisitor(const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateVisitor(username);
    }
    return ifaces_[i]->UpdateVisitor(username);
  }

  void Increase(User& _return, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Increase(_return, username);
    }
    ifaces_[i]->Increase(_return, username);
    return;
  }

  bool CheckLogin(const std::string& username, const std::string& pword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CheckLogin(username, pword);
    }
    return ifaces_[i]->CheckLogin(username, pword);
  }

};

}} // namespace

#endif
